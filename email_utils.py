import mimetypes
import os
import logging
from typing import Optional, List, Union, Dict, Tuple
from flask_mail import Mail, Message
from flask import current_app
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import re
from pathlib import Path
from datetime import datetime
from config import Config

# Initialize Mail (but attach it to the Flask app later)
mail = Mail()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EmailError(Exception):
    """Custom exception for email-related errors"""
    pass

class EmailValidator:
    """Email validation utility class"""
    
    @staticmethod
    def validate_email_address(email: str) -> bool:
        """Validate email format using regex"""
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email) is not None
    
    @staticmethod
    def validate_email_list(emails: Union[str, List[str]]) -> List[str]:
        """Validate and normalize email list"""
        if isinstance(emails, str):
            email_list = [emails]
        else:
            email_list = emails
        
        validated_emails = []
        for email in email_list:
            email = email.strip()
            if not EmailValidator.validate_email_address(email):
                raise EmailError(f"Invalid email address: {email}")
            validated_emails.append(email)
        
        return validated_emails

class AttachmentHandler:
    """Handle file attachments for emails"""
    
    MAX_FILE_SIZE = 25 * 1024 * 1024  # 25MB
    MAX_TOTAL_SIZE = 25 * 1024 * 1024  # 25MB total
    
    @staticmethod
    def validate_attachment(file_path: str) -> Tuple[bool, str]:
        """Validate a single attachment file"""
        if not os.path.exists(file_path):
            return False, f"File not found: {file_path}"
        
        if os.path.getsize(file_path) == 0:
            return False, f"File is empty: {file_path}"
        
        file_size = os.path.getsize(file_path)
        if file_size > AttachmentHandler.MAX_FILE_SIZE:
            return False, f"File too large ({file_size / (1024*1024):.1f}MB): {file_path}"
        
        return True, "Valid"
    
    @staticmethod
    def get_mime_type(file_path: str) -> str:
        """Get MIME type for file"""
        mime_type, _ = mimetypes.guess_type(file_path)
        return mime_type or "application/octet-stream"
    
    @staticmethod
    def attach_file_to_message(msg: Message, file_path: str, filename: Optional[str] = None) -> bool:
        """Attach a file to a Flask-Mail message"""
        try:
            is_valid, error_msg = AttachmentHandler.validate_attachment(file_path)
            if not is_valid:
                logger.warning(f"Skipping attachment: {error_msg}")
                return False
            
            mime_type = AttachmentHandler.get_mime_type(file_path)
            display_name = filename or os.path.basename(file_path)
            
            with open(file_path, "rb") as file:
                msg.attach(
                    filename=display_name,
                    content_type=mime_type,
                    data=file.read()
                )
            
            file_size = os.path.getsize(file_path)
            logger.info(f"Attached file {display_name} ({file_size / 1024:.1f}KB)")
            return True
            
        except Exception as e:
            logger.error(f"Error attaching file {file_path}: {e}")
            return False

class EmailTemplateEngine:
    """Email template management"""
    
    @staticmethod
    def create_html_wrapper(content: str, title: str = "Email") -> str:
        """Wrap content in a basic HTML email template"""
        return f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{title}</title>
        </head>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0;">
            <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                {content}
            </div>
        </body>
        </html>
        """
    
    @staticmethod
    def create_business_template(header: str, content: str, footer: str = "") -> str:
        """Create a professional business email template"""
        default_footer = """
        <div style="text-align: center; color: #6c757d; font-size: 12px; margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6;">
            <p>This email was automatically generated by the system.</p>
            <p>If you have any questions, please contact support.</p>
        </div>
        """
        
        return EmailTemplateEngine.create_html_wrapper(f"""
        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px;">
            <h2 style="color: #2c3e50; margin-top: 0;">{header}</h2>
        </div>
        
        <div style="margin-bottom: 20px;">
            {content}
        </div>
        
        {footer or default_footer}
        """)

class EmailService:
    """Main email service class"""
    
    def __init__(self):
        self.validator = EmailValidator()
        self.attachment_handler = AttachmentHandler()
        self.template_engine = EmailTemplateEngine()
    
    def get_sender_email(self, sender: Optional[str] = None) -> str:
        """Get sender email from config or parameter"""
        email_sender = sender or getattr(Config, 'MAIL_DEFAULT_SENDER', None)
        if not email_sender:
            raise EmailError("No sender email address configured")
        return email_sender
    
    def send_basic_email(self, to: Union[str, List[str]], subject: str, body: str, 
                        html: bool = False, sender: Optional[str] = None) -> bool:
        """Send a basic email"""
        try:
            recipients = self.validator.validate_email_list(to)
            sender_email = self.get_sender_email(sender)
            
            msg = Message(
                subject=subject,
                recipients=recipients,
                sender=sender_email
            )
            
            if html:
                msg.html = body
            else:
                msg.body = body
            
            mail.send(msg)
            logger.info(f"Email sent successfully to {', '.join(recipients)}")
            return True
            
        except Exception as e:
            error_msg = f"Error sending email to {to}: {str(e)}"
            logger.error(error_msg)
            raise EmailError(error_msg) from e
    
    def send_email_with_attachments(self, to: Union[str, List[str]], subject: str, 
                                  body: str, attachments: Optional[List[str]] = None,
                                  html: bool = False, sender: Optional[str] = None) -> bool:
        """Send email with multiple attachments"""
        try:
            recipients = self.validator.validate_email_list(to)
            sender_email = self.get_sender_email(sender)
            
            msg = Message(
                subject=subject,
                recipients=recipients,
                sender=sender_email
            )
            
            if html:
                msg.html = body
            else:
                msg.body = body
            
            # Handle attachments
            if attachments:
                total_size = 0
                for attachment_path in attachments:
                    if os.path.exists(attachment_path):
                        file_size = os.path.getsize(attachment_path)
                        if total_size + file_size > self.attachment_handler.MAX_TOTAL_SIZE:
                            logger.warning("Total attachment size limit reached. Skipping remaining files.")
                            break
                        
                        if self.attachment_handler.attach_file_to_message(msg, attachment_path):
                            total_size += file_size
            
            mail.send(msg)
            logger.info(f"Email with attachments sent to {', '.join(recipients)}")
            return True
            
        except Exception as e:
            error_msg = f"Error sending email with attachments to {to}: {e}"
            logger.error(error_msg)
            raise EmailError(error_msg) from e
    
    def send_templated_email(self, to: Union[str, List[str]], subject: str, 
                           template_data: Dict, sender: Optional[str] = None) -> bool:
        """Send email using template data"""
        try:
            recipients = self.validator.validate_email_list(to)
            
            header = template_data.get('header', 'Notification')
            content = template_data.get('content', '')
            footer = template_data.get('footer', '')
            
            html_body = self.template_engine.create_business_template(header, content, footer)
            
            return self.send_basic_email(
                to=recipients,
                subject=subject,
                body=html_body,
                html=True,
                sender=sender
            )
            
        except Exception as e:
            logger.error(f"Error sending templated email: {e}")
            raise EmailError(f"Failed to send templated email: {e}") from e

# Business-specific email functions
def send_sales_report_email(recipient: str, report_name: str, pdf_path: str, 
                          report_data: dict, sender: Optional[str] = None) -> bool:
    """Send sales report email with enhanced template"""
    email_service = EmailService()
    
    try:
        # Validate report data
        total_orders = report_data.get('total_orders', 0)
        total_revenue = report_data.get('total_revenue', 0)
        total_products = report_data.get('total_products_sold', 0)
        top_category = report_data.get('top_selling_category_name', 'N/A')
        
        content = f"""
        <p>Your requested sales report "<strong>{report_name}</strong>" has been generated and is ready for review.</p>
        
        <div style="background-color: #fff; border: 1px solid #dee2e6; border-radius: 5px; padding: 20px; margin: 20px 0;">
            <h3 style="color: #495057; margin-top: 0;">Report Summary</h3>
            <table style="width: 100%; border-collapse: collapse;">
                <tr style="border-bottom: 1px solid #f1f3f4;">
                    <td style="padding: 8px 0; font-weight: bold;">Total Orders:</td>
                    <td style="padding: 8px 0; text-align: right;">{total_orders:,}</td>
                </tr>
                <tr style="border-bottom: 1px solid #f1f3f4;">
                    <td style="padding: 8px 0; font-weight: bold;">Total Revenue:</td>
                    <td style="padding: 8px 0; text-align: right;">${total_revenue:,.2f}</td>
                </tr>
                <tr style="border-bottom: 1px solid #f1f3f4;">
                    <td style="padding: 8px 0; font-weight: bold;">Products Sold:</td>
                    <td style="padding: 8px 0; text-align: right;">{total_products:,}</td>
                </tr>
                <tr>
                    <td style="padding: 8px 0; font-weight: bold;">Top Category:</td>
                    <td style="padding: 8px 0; text-align: right;">{top_category}</td>
                </tr>
            </table>
        </div>
        
        <div style="background-color: #e8f5e8; border-left: 4px solid #28a745; padding: 15px; margin: 20px 0;">
            <p style="margin: 0;"><strong>Note:</strong> The detailed report is attached as a PDF file.</p>
        </div>
        """
        
        template_data = {
            'header': 'Sales Report Ready',
            'content': content
        }
        
        subject = f"Sales Report: {report_name} - {datetime.now().strftime('%Y-%m-%d')}"
        
        return email_service.send_email_with_attachments(
            to=recipient,
            subject=subject,
            body=email_service.template_engine.create_business_template(
                template_data['header'], 
                template_data['content']
            ),
            attachments=[pdf_path] if pdf_path else None,
            html=True,
            sender=sender
        )
        
    except Exception as e:
        logger.error(f"Error sending sales report email: {e}")
        raise EmailError(f"Failed to send sales report email: {e}") from e

def send_order_confirmation_email(recipient: str, order_data: dict, sender: Optional[str] = None) -> bool:
    """Send order confirmation with enhanced validation"""
    email_service = EmailService()
    
    try:
        # Extract and validate order data
        order_id = order_data.get('order_id', 'N/A')
        customer_name = order_data.get('customer_name', 'Valued Customer')
        total_amount = float(order_data.get('total_amount', 0))
        order_items = order_data.get('items', [])
        order_date = order_data.get('order_date', datetime.now().strftime('%Y-%m-%d'))
        
        # Build items table
        items_html = ""
        if order_items:
            items_html = """
            <table style="width: 100%; border-collapse: collapse; margin: 15px 0;">
                <thead>
                    <tr style="background-color: #f8f9fa;">
                        <th style="padding: 10px; text-align: left; border-bottom: 2px solid #dee2e6;">Product</th>
                        <th style="padding: 10px; text-align: center; border-bottom: 2px solid #dee2e6;">Qty</th>
                        <th style="padding: 10px; text-align: right; border-bottom: 2px solid #dee2e6;">Price</th>
                    </tr>
                </thead>
                <tbody>
            """
            
            for item in order_items:
                product_name = item.get('product_name', 'Product')
                quantity = item.get('quantity', 1)
                price = float(item.get('price', 0))
                
                items_html += f"""
                    <tr>
                        <td style="padding: 8px; border-bottom: 1px solid #f1f3f4;">{product_name}</td>
                        <td style="padding: 8px; text-align: center; border-bottom: 1px solid #f1f3f4;">{quantity}</td>
                        <td style="padding: 8px; text-align: right; border-bottom: 1px solid #f1f3f4;">${price:.2f}</td>
                    </tr>
                """
            
            items_html += "</tbody></table>"
        
        content = f"""
        <p>Hello {customer_name},</p>
        <p>Thank you for your custom magnet order! We're excited to confirm that we've received your order and it's being processed.</p>
        
        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #495057;">Order Details</h3>
            <p><strong>Order ID:</strong> #{order_id}</p>
            <p><strong>Order Date:</strong> {order_date}</p>
            <p><strong>Total Amount:</strong> ${total_amount:.2f}</p>
        </div>
        
        {f'<div style="margin: 20px 0;"><h3 style="color: #495057;">Order Items</h3>{items_html}</div>' if items_html else ''}
        
        <div style="background-color: #d4edda; border-left: 4px solid #28a745; padding: 15px; margin: 20px 0;">
            <p style="margin: 0;"><strong>What's Next?</strong></p>
            <p style="margin: 5px 0 0 0;">We'll begin processing your custom magnets and will send you updates as your order progresses. You'll receive a shipping notification once your order is on its way.</p>
        </div>
        """
        
        subject = f"Order Confirmation - #{order_id}"
        
        return email_service.send_basic_email(
            to=recipient,
            subject=subject,
            body=email_service.template_engine.create_business_template(
                'Order Confirmation', 
                content,
                """
                <div style="text-align: center; color: #6c757d; font-size: 12px; margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6;">
                    <p>Thank you for choosing our custom magnet services!</p>
                    <p>Questions? Contact us at support@custommagnets.com</p>
                </div>
                """
            ),
            html=True,
            sender=sender
        )
        
    except Exception as e:
        logger.error(f"Error sending order confirmation email: {e}")
        raise EmailError(f"Failed to send order confirmation email: {e}") from e

# Utility functions
def cleanup_temp_files(file_paths: List[str]) -> None:
    """Clean up temporary files after email operations"""
    for file_path in file_paths:
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                logger.info(f"Cleaned up temporary file: {file_path}")
        except Exception as e:
            logger.warning(f"Could not remove temporary file {file_path}: {e}")

def test_email_configuration() -> bool:
    """Test email configuration"""
    try:
        config_attrs = ['MAIL_SERVER', 'MAIL_PORT', 'MAIL_USE_TLS', 'MAIL_USERNAME', 'MAIL_PASSWORD']
        missing_attrs = [attr for attr in config_attrs if not hasattr(Config, attr)]
        
        if missing_attrs:
            logger.error(f"Missing email configuration: {', '.join(missing_attrs)}")
            return False
        
        logger.info("Email configuration appears to be complete")
        return True
        
    except Exception as e:
        logger.error(f"Error checking email configuration: {e}")
        return False

# Export main service class and key functions
__all__ = [
    'EmailService', 
    'EmailError', 
    'send_sales_report_email', 
    'send_order_confirmation_email',
    'cleanup_temp_files',
    'test_email_configuration'
]